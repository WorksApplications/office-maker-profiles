AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Profile Service
Parameters:
  TablePrefix:
    Type: String
    Default: dev_

  LambdaAlias:
    Type: String
    Default: dev_

  ScalingRoleArn:
    Type: String
    Default: ""

Resources:
  # ScalingRole:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         -
  #           Effect: "Allow"
  #           Principal:
  #             Service:
  #               - application-autoscaling.amazonaws.com
  #           Action:
  #             - "sts:AssumeRole"
  #     Path: "/"
  #     Policies:
  #       -
  #         PolicyName: "root"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             -
  #               Effect: "Allow"
  #               Action:
  #                 - "dynamodb:DescribeTable"
  #                 - "dynamodb:UpdateTable"
  #                 - "cloudwatch:PutMetricAlarm"
  #                 - "cloudwatch:DescribeAlarms"
  #                 - "cloudwatch:GetMetricStatistics"
  #                 - "cloudwatch:SetAlarmState"
  #                 - "cloudwatch:DeleteAlarms"
  #               Resource: "*"

  # DynamoDB Tables
  ProfilesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev_profiles
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ProfilesWriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId:
        'Fn::Join':
          - /
          - - table
            - Ref: ProfilesTable
      RoleARN:
        Ref: ScalingRoleArn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  ProfilesWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ProfilesWriteScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ProfilesWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  ProfilesSearchHelpTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev_profilesSearchHelp
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
        - AttributeName: userId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ProfilesSearchHelpWriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 15
      MinCapacity: 1
      ResourceId:
        'Fn::Join':
          - /
          - - table
            - Ref: ProfilesSearchHelpTable
      RoleARN:
        Ref: ScalingRoleArn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  ProfilesSearchHelpWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ProfilesSearchHelpWriteScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ProfilesSearchHelpWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  ProfilesPostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: dev_profilesPosts
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: key
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # Lambda Functions
  Scaledown:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_operation_scaledown
      Handler: operation/scaledown.handler
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBFullAccess

  Authorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_authorizer
      Handler: authorizer/index.handler
      Runtime: nodejs6.10

  Sustain:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_sustain
      Handler: authorizer/sustain.handler
      Runtime: nodejs6.10

  ProfilesQuery:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_profiles_query
      Handler: profiles/query.handler
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBReadOnlyAccess
      Timeout: 30

  ProfilesGet:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_profiles_get
      Handler: profiles/get.handler
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBReadOnlyAccess

  ProfilesPut:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_profiles_put
      Handler: profiles/put.handler
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBFullAccess

  ProfilesPatch:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_profiles_patch
      Handler: profiles/patch.handler
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBFullAccess

  ProfilesDelete:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_profiles_delete
      Handler: profiles/delete.handler
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBFullAccess

  PostsQuery:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        'Fn::Join':
          - ''
          - - Ref: LambdaAlias
            - profiles_posts_query
      Handler: posts/query.handler
      Runtime: nodejs6.10
      Policies: AmazonDynamoDBReadOnlyAccess
      Timeout: 30

  # API Gateway
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      DefinitionUri: ../tmp/swagger.yml
      Variables:
        HackUpdate: 0
        LambdaAlias:
          Ref: LambdaAlias

  # Permissions
  ScaledownPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Scaledown
      Principal: events.amazonaws.com

  SustainPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Sustain
      Principal: apigateway.amazonaws.com

  ProfilesQueryPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ProfilesQuery
      Principal: apigateway.amazonaws.com

  ProfilesGetPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ProfilesGet
      Principal: apigateway.amazonaws.com

  ProfilesPutPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ProfilesPut
      Principal: apigateway.amazonaws.com

  ProfilesPatchPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ProfilesPatch
      Principal: apigateway.amazonaws.com

  ProfilesDeletePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: ProfilesDelete
      Principal: apigateway.amazonaws.com

  AuthorizerPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: Authorizer
      Principal: apigateway.amazonaws.com

  # Cloudwatch Events
  ScaledownEvent:
    Type: "AWS::Events::Rule"
    Properties:
      Name: "test_profiles_operation_scaledown_event"
      Description: "Dummy write event to correctly scale-down profiles tables."
      ScheduleExpression: "cron(0/1 * * * ? *)"
      Targets:
        - Arn:
            Fn::GetAtt:
              - Scaledown
              - Arn
          Id: test_profiles_operation_scaledown_event
