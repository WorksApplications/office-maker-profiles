# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: office-maker-profiles

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, 'dev'}
  region: ${self:custom.external_file.environment.region}
  environment:
    TABLE_PREFIX: ${self:custom.external_file.environment.tablePrefix}
    DB_ENDPOINT: ${self:custom.external_file.environment.dynamodb.endpoint, ''}
    REGION: ${self:custom.provider.region, "ap-northeast-1"}
    DB_PORT: ${self:custom.external_file.environment.dynamodb.port, ''}
  memorySize: 128
  timeout: 15
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
        - "dynamodb:*"
      Resource:
      - Fn::Join:
        - ':'
        - - arn:aws:lambda
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*
      - Fn::Join:
        - ':'
        - - arn:aws:dynamodb
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - table/*

custom:
  external_file:
    environment: ${file(./config.${self:provider.stage}.json)}
  dynamodb:
    start:
      port: ${self:custom.external_file.environment.dynamodb.port, "8000"}
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    # Uncomment only if you already have a DynamoDB running locally
    # noStart: true
package:
  exclude:
    - .git/**
    - node_modules/**
    - test/**
    - .dynamodb/**
functions:
  sustain:
    handler: functions/authorizer/sustain.handler
    events:
      - http:
          path: sustain
          method: GET
          integration: lambda-proxy
          cors:
            origin: '*'
  authorizer:
    handler: functions/authorizer/index.handler
    name: ${self:service}-${self:provider.stage}-authorizer
    # environment:
    #   sourceIp: ${self:custom.external_file.environment.sourceIp}
  profilesQuery:
    handler: functions/profiles/query.handler
    name: ${self:service}-${self:provider.stage}-profilesQuery
    events:
      - http:
          path: profiles
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true

  profilesGet:
    handler: functions/profiles/get.handler
    name: ${self:service}-${self:provider.stage}-profilesGet
    events:
      - http:
          path: profiles/{userId}
          method: get
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                userId: true

  profilesPut:
    handler: functions/profiles/put.handler
    name: ${self:service}-${self:provider.stage}-profilesPut
    events:
      - http:
          path: profiles/{userId}
          method: put
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                userId: true

  profilesPatch:
    handler: functions/profiles/patch.handler
    name: ${self:service}-${self:provider.stage}-profilesPatch
    events:
      - http:
          path: profiles/{userId}
          method: patch
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                userId: true

  profilesDelete:
    handler: functions/profiles/delete.handler
    name: ${self:service}-${self:provider.stage}-profilesDelete
    events:
      - http:
          path: profiles/{userId}
          method: delete
          integration: lambda-proxy
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - Pragma
              - Cache-Control
              - If-Modified-Since
            allowCredentials: true
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            type: token
          request:
            parameters:
              headers:
                authorization: true
              paths:
                userId: true

resources:
  Resources:
    ProfilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-profiles
#          'Fn::Join':
#            - ''
#            - - Ref: TablePrefix
#              - profiles
        AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ProfilesSearchHelpTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-profilesSearchHelp
#          'Fn::Join':
#            - ''
#            - - Ref: TablePrefix
#              - profilesSearchHelp
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ProfilesPostsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-profilesPosts
#          'Fn::Join':
#            - ''
#            - - Ref: TablePrefix
#              - profilesPosts
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    SustainPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: SustainLambdaFunction
        Principal: apigateway.amazonaws.com

    ProfilesQueryPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: ProfilesQueryLambdaFunction
        Principal: apigateway.amazonaws.com

    ProfilesGetPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: ProfilesGetLambdaFunction
        Principal: apigateway.amazonaws.com

    ProfilesPutPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: ProfilesPutLambdaFunction
        Principal: apigateway.amazonaws.com

    ProfilesPatchPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: ProfilesPatchLambdaFunction
        Principal: apigateway.amazonaws.com

    ProfilesDeletePermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: ProfilesDeleteLambdaFunction
        Principal: apigateway.amazonaws.com

    AuthorizerPermission:
      Type: "AWS::Lambda::Permission"
      Properties:
        Action: lambda:InvokeFunction
        FunctionName:
          Ref: AuthorizerLambdaFunction
        Principal: apigateway.amazonaws.com

plugins:
  - serverless-plugin-stage-variables
  - serverless-dynamodb-local
  - serverless-offline
